@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@function get-spacing($keys...) {
    $list: ();

    @for $i from 1 through length($keys) {
        $key: nth($keys, $i);

        @if map-has-key($spacing, $key) {
            @if length($keys) == 1 {
                $list: map-get($spacing, $key) * 1px;
            }
            @else {
                $list: append($list, map-get($spacing, $key) * 1px, space);
            }
        }
        @else {
            @error '#{$key} does not exist in the $spacing map.  Allowed values are #{$spacing}.';
            @return null;
        }
    }

    @return $list;
}

@function color($color-name, $color-variant:null) {
    // color variant is optional
    @if ($color-variant != null) {
      // map inception
      @return map-get(map-get($colors, $color-name), $color-variant);
    } @else {
      @return map-get($colors, $color-name);
    }
  }

@function get-rgb($color) {
    @debug($color);
    $red: red($color);
    $green: green($color);
    $blue: blue($color);

    @return rgb($red, $green, $blue);
}

@function tint($color, $percentage) {
    @return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
}